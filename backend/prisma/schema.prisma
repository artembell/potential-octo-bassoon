generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            Int             @id @default(autoincrement())
    email         String          @unique @db.VarChar(200)
    subscriptions Subscription[]  @relation(name: "SubscriptionUser")
    metadata      Json
    contents      UserOnContent[]
}

model Product {
    id       Int     @id @default(autoincrement())
    title    String  @db.VarChar(200)
    prices   Price[] @relation(name: "ProductPrice")
    metadata Json

    content Content? @relation(name: "ProductContent")
}

model Content {
    id        Int             @id @default(autoincrement())
    data      String
    product   Product         @relation(name: "ProductContent", fields: [productId], references: [id])
    productId Int             @unique
    users     UserOnContent[]
}

model UserOnContent {
    user      User      @relation(fields: [userId], references: [id])
    userId    Int
    content   Content   @relation(fields: [contentId], references: [id])
    contentId Int
    endDate   DateTime?

    @@id([contentId, userId])
}

model Price {
    id           Int            @id @default(autoincrement())
    title        String         @db.VarChar(200)
    currency     Currency       @default(usd)
    amount       Int
    period       PricePeriod
    product      Product        @relation(name: "ProductPrice", fields: [productId], references: [id])
    productId    Int
    subscription Subscription[] @relation(name: "SubscriptionPrice")
    metadata     Json
}

enum Currency {
    usd
}

model Subscription {
    id                Int                @id @default(autoincrement())
    user              User               @relation(name: "SubscriptionUser", fields: [userId], references: [id])
    userId            Int
    status            SubscriptionStatus @default(not_active)
    price             Price              @relation(name: "SubscriptionPrice", fields: [priceId], references: [id])
    priceId           Int
    subscriptionParts SubscriptionPart[] @relation(name: "PartOfSubscription")
    invoices          Invoice[]          @relation(name: "InvoiceSubscription")
    metadata          Json
}

enum SubscriptionStatus {
    not_active
    active
    suspended
    cancelled
}

model SubscriptionPart {
    id             Int          @id @default(autoincrement())
    description    String       @db.VarChar(200)
    startDate      DateTime
    endDate        DateTime?
    subscription   Subscription @relation(name: "PartOfSubscription", fields: [subscriptionId], references: [id])
    subscriptionId Int
    metadata       Json
}

enum PricePeriod {
    week
    month
    year
}

model Invoice {
    id             Int               @id @default(autoincrement())
    subscription   Subscription      @relation(name: "InvoiceSubscription", fields: [subscriptionId], references: [id])
    subscriptionId Int
    paidStatus     InvoicePaidStatus @default(pending)
    createdDate    DateTime          @default(now())
    updatedDate    DateTime          @default(now())
    amount         Int
    invoicePdf     String?
    metadata       Json
}

enum InvoicePaidStatus {
    pending
    paid
    failed
}
